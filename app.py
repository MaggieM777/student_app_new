import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if "firms" not in st.session_state:
    st.session_state.firms = []
if "students" not in st.session_state:
    st.session_state.students = []
if "imported_students" not in st.session_state:
    st.session_state.imported_students = []
if "classified" not in st.session_state:
    st.session_state.classified = []

st.title("–£—á–µ–Ω–∏–∫-–§–∏—Ä–º–∞ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")

# --- –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Ñ–∏—Ä–º–∞ ---
st.header("–î–æ–±–∞–≤–∏ —Ñ–∏—Ä–º–∞")
firm_name = st.text_input("–ò–º–µ –Ω–∞ —Ñ–∏—Ä–º–∞—Ç–∞", key="firm_name_input")
firm_quota = st.number_input("–ö–≤–æ—Ç–∞", min_value=1, step=1, key="firm_quota_input")

if st.button("–î–æ–±–∞–≤–∏ —Ñ–∏—Ä–º–∞"):
    if firm_name.strip() and firm_quota > 0:
        st.session_state.firms.append({"name": firm_name.strip(), "quota": firm_quota})
        st.success(f"–§–∏—Ä–º–∞ '{firm_name.strip()}' –¥–æ–±–∞–≤–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        st.error("–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –∏–º–µ –Ω–∞ —Ñ–∏—Ä–º–∞ –∏ –≤–∞–ª–∏–¥–Ω–∞ –∫–≤–æ—Ç–∞.")

if st.session_state.firms:
    st.subheader("–î–æ–±–∞–≤–µ–Ω–∏ —Ñ–∏—Ä–º–∏")
    for firm in st.session_state.firms:
        st.write(f"{firm['name']} - –ö–≤–æ—Ç–∞: {firm['quota']}")

st.markdown("---")

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —É—á–µ–Ω–∏—Ü–∏ ---
st.header("–ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —É—á–µ–Ω–∏—Ü–∏ –æ—Ç Excel")
uploaded_file = st.file_uploader("–ö–∞—á–∏ Excel —Ñ–∞–π–ª (.xlsx)", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)
        st.write("–ö–æ–ª–æ–Ω–∏ –≤ Excel —Ñ–∞–π–ª–∞:", list(df.columns))

        required_columns = ["–ò–º–µ", "–¢–æ—á–∫–∏"]
        missing_cols = [col for col in required_columns if col not in df.columns]
        if missing_cols:
            st.error(f"Excel —Ñ–∞–π–ª—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞ –ø–æ–Ω–µ –∫–æ–ª–æ–Ω–∏—Ç–µ: {', '.join(required_columns)}.")
        else:
            temp_students = []
            for _, row in df.iterrows():
                name = row["–ò–º–µ"]
                points = row["–¢–æ—á–∫–∏"]
                choices = [row[col] for col in df.columns if col.startswith("–ñ–µ–ª–∞–Ω–∏–µ") and pd.notna(row[col])]
                if name and pd.notna(points) and choices:
                    temp_students.append({
                        "name": name,
                        "points": points,
                        "choices": choices
                    })
            st.session_state.imported_students = temp_students
            st.success(f"–§–∞–π–ª—ä—Ç –µ –ø—Ä–æ—á–µ—Ç–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ù–∞–º–µ—Ä–µ–Ω–∏ —É—á–µ–Ω–∏—Ü–∏: {len(temp_students)}")

            if st.button("–î–æ–±–∞–≤–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–∏—Ç–µ —É—á–µ–Ω–∏—Ü–∏ –∫—ä–º —Å–ø–∏—Å—ä–∫–∞"):
                before = len(st.session_state.students)
                st.session_state.students.extend(st.session_state.imported_students)
                st.session_state.imported_students = []
                st.success(f"–î–æ–±–∞–≤–µ–Ω–∏ {len(st.session_state.students) - before} —É—á–µ–Ω–∏—Ü–∏.")
    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Ñ–∞–π–ª–∞: {e}")

st.markdown("---")

# --- –†—ä—á–Ω–æ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ —É—á–µ–Ω–∏–∫ ---
st.header("–î–æ–±–∞–≤–∏ —É—á–µ–Ω–∏–∫")
student_name = st.text_input("–ò–º–µ –Ω–∞ —É—á–µ–Ω–∏–∫–∞", key="student_name_input")
student_points = st.number_input("–¢–æ—á–∫–∏", min_value=0, step=1, key="student_points_input")

if st.session_state.firms:
    student_choices = []
    for i in range(6):
        choice = st.selectbox(f"–ò–∑–±–µ—Ä–∏ —Ñ–∏—Ä–º–∞ - –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏–µ {i+1}",
                              options=[firm["name"] for firm in st.session_state.firms],
                              key=f"choice_{i}")
        student_choices.append(choice)
else:
    st.info("–ú–æ–ª—è, –¥–æ–±–∞–≤–µ—Ç–µ –ø–æ–Ω–µ –µ–¥–Ω–∞ —Ñ–∏—Ä–º–∞, –∑–∞ –¥–∞ –º–æ–∂–µ—Ç–µ –¥–∞ –∏–∑–±–∏—Ä–∞—Ç–µ —Ñ–∏—Ä–º–∏ –∑–∞ —É—á–µ–Ω–∏—Ü–∏—Ç–µ.")

if st.button("–î–æ–±–∞–≤–∏ —É—á–µ–Ω–∏–∫"):
    if student_name.strip() and student_points >= 0 and student_choices:
        st.session_state.students.append({
            "name": student_name.strip(),
            "points": student_points,
            "choices": student_choices
        })
        st.success(f"–£—á–µ–Ω–∏–∫—ä—Ç '{student_name.strip()}' –¥–æ–±–∞–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        st.error("–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –∏–º–µ, —Ç–æ—á–∫–∏ –∏ –∏–∑–±–µ—Ä–µ—Ç–µ —Ñ–∏—Ä–º–∏ –∑–∞ –≤—Å–∏—á–∫–∏ –∂–µ–ª–∞–Ω–∏—è.")

# --- –°–ø–∏—Å—ä–∫ –Ω–∞ —É—á–µ–Ω–∏—Ü–∏—Ç–µ ---
if st.session_state.students:
    st.subheader("–î–æ–±–∞–≤–µ–Ω–∏ —É—á–µ–Ω–∏—Ü–∏")
    for student in st.session_state.students:
        st.write(f"{student['name']} - –¢–æ—á–∫–∏: {student['points']}")
        st.write(f"–ñ–µ–ª–∞–Ω–∏—è: {', '.join(student['choices'])}")

st.markdown("---")

# --- –ö–ª–∞—Å–∏—Ä–∞–Ω–µ ---
if st.button("–ö–ª–∞—Å–∏—Ä–∞–π —É—á–µ–Ω–∏—Ü–∏—Ç–µ"):
    if not st.session_state.firms:
        st.error("–ù—è–º–∞ –¥–æ–±–∞–≤–µ–Ω–∏ —Ñ–∏—Ä–º–∏ –∑–∞ –∫–ª–∞—Å–∏—Ä–∞–Ω–µ.")
    elif not st.session_state.students:
        st.error("–ù—è–º–∞ –¥–æ–±–∞–≤–µ–Ω–∏ —É—á–µ–Ω–∏—Ü–∏ –∑–∞ –∫–ª–∞—Å–∏—Ä–∞–Ω–µ.")
    else:
        students_sorted = sorted(st.session_state.students, key=lambda x: x["points"], reverse=True)
        firm_slots = {firm["name"]: firm["quota"] for firm in st.session_state.firms}
        classified = []

        for student in students_sorted:
            placed = False
            for choice in student["choices"]:
                if firm_slots.get(choice, 0) > 0:
                    classified.append({"–ò–º–µ": student["name"], "–§–∏—Ä–º–∞": choice, "–¢–æ—á–∫–∏": student["points"]})
                    firm_slots[choice] -= 1
                    placed = True
                    break
            if not placed:
                classified.append({"–ò–º–µ": student["name"], "–§–∏—Ä–º–∞": "–ù–µ –µ –∫–ª–∞—Å–∏—Ä–∞–Ω", "–¢–æ—á–∫–∏": student["points"]})

        st.session_state.classified = classified

        st.subheader("–†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –∫–ª–∞—Å–∏—Ä–∞–Ω–µ—Ç–æ")
        for c in classified:
            st.write(f"{c['–ò–º–µ']} - –ö–ª–∞—Å–∏—Ä–∞–Ω –≤—ä–≤ —Ñ–∏—Ä–º–∞: {c['–§–∏—Ä–º–∞']}")

        # --- –î–∏–∞–≥—Ä–∞–º–∏ ---
        st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

        firm_distribution = {}
        for c in classified:
            firm_distribution[c["–§–∏—Ä–º–∞"]] = firm_distribution.get(c["–§–∏—Ä–º–∞"], 0) + 1

        labels = list(firm_distribution.keys())
        sizes = list(firm_distribution.values())

        # –ö—Ä—ä–≥–æ–≤–∞ –¥–∏–∞–≥—Ä–∞–º–∞
        st.markdown("**–ö—Ä—ä–≥–æ–≤–∞ –¥–∏–∞–≥—Ä–∞–º–∞: –†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ñ–∏—Ä–º–∏**")
        fig1, ax1 = plt.subplots()
        ax1.pie(sizes, labels=labels, autopct="%1.1f%%", startangle=90)
        ax1.axis("equal")
        st.pyplot(fig1)

        # –°—Ç—ä–ª–±–æ–≤–∏–¥–Ω–∞ –¥–∏–∞–≥—Ä–∞–º–∞
        st.markdown("**–°—Ç—ä–ª–±–æ–≤–∏–¥–Ω–∞ –¥–∏–∞–≥—Ä–∞–º–∞: –ë—Ä–æ–π —É—á–µ–Ω–∏—Ü–∏ –ø–æ —Ñ–∏—Ä–º–∞**")
        fig2, ax2 = plt.subplots()
        ax2.bar(labels, sizes, color="skyblue")
        ax2.set_ylabel("–ë—Ä–æ–π —É—á–µ–Ω–∏—Ü–∏")
        ax2.set_xlabel("–§–∏—Ä–º–∞")
        ax2.set_title("–†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ñ–∏—Ä–º–∏")
        plt.xticks(rotation=45)
        st.pyplot(fig2)

        # –õ–∏–Ω–µ–π–Ω–∞ –¥–∏–∞–≥—Ä–∞–º–∞
        st.markdown("**–õ–∏–Ω–µ–π–Ω–∞ –¥–∏–∞–≥—Ä–∞–º–∞: –¢–æ—á–∫–∏ –Ω–∞ —É—á–µ–Ω–∏—Ü–∏—Ç–µ**")
        fig3, ax3 = plt.subplots()
        ax3.plot([c["–ò–º–µ"] for c in classified], [c["–¢–æ—á–∫–∏"] for c in classified], marker="o")
        ax3.set_ylabel("–¢–æ—á–∫–∏")
        ax3.set_xlabel("–£—á–µ–Ω–∏–∫")
        ax3.set_title("–¢–æ—á–∫–∏ –ø–æ —Ä–µ–¥ –Ω–∞ –∫–ª–∞—Å–∏—Ä–∞–Ω–µ")
        plt.xticks(rotation=45)
        st.pyplot(fig3)

st.markdown("---")

# --- –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç—á–µ—Ç ---
st.header("–ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç—á–µ—Ç")

specialty = st.text_input("–°–ø–µ—Ü–∏–∞–ª–Ω–æ—Å—Ç")
school_class = st.text_input("–ö–ª–∞—Å")
teacher = st.text_input("–ö–ª–∞—Å–µ–Ω —Ä—ä–∫–æ–≤–æ–¥–∏—Ç–µ–ª")

if st.button("–ì–µ–Ω–µ—Ä–∏—Ä–∞–π –æ—Ç—á–µ—Ç"):
    if not st.session_state.classified:
        st.warning("–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –∑–∞ –æ—Ç—á–µ—Ç.")
    else:
        df_report = pd.DataFrame(st.session_state.classified)
        df_report.insert(0, "–ö–ª–∞—Å", school_class)
        df_report.insert(0, "–°–ø–µ—Ü–∏–∞–ª–Ω–æ—Å—Ç", specialty)
        df_report.insert(0, "–ö–ª–∞—Å–µ–Ω —Ä—ä–∫–æ–≤–æ–¥–∏—Ç–µ–ª", teacher)

        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df_report.to_excel(writer, index=False, sheet_name="–û—Ç—á–µ—Ç")
        output.seek(0)

        st.success("–û—Ç—á–µ—Ç—ä—Ç –µ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        st.download_button(
            label="üì• –ò–∑—Ç–µ–≥–ª–∏ Excel –æ—Ç—á–µ—Ç",
            data=output,
            file_name="otchet_uchenici.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
